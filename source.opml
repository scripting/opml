<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- OPML generated by OPML Editor v10.1b19 on Mon, 09 May 2022 19:46:16 GMT -->
<opml version="2.0">
	<head>
		<title>nodeEditor: daveopml</title>
		<dateCreated>Tue, 13 Jun 2017 13:13:17 GMT</dateCreated>
		<dateModified>Mon, 09 May 2022 19:46:16 GMT</dateModified>
		<ownerName>Dave Winer</ownerName>
		<ownerId>http://davewiner.com/</ownerId>
		<expansionState>1, 2, 3, 24</expansionState>
		<vertScrollState>1</vertScrollState>
		<windowTop>235</windowTop>
		<windowLeft>946</windowLeft>
		<windowBottom>1144</windowBottom>
		<windowRight>2021</windowRight>
		</head>
	<body>
		<outline text="/fargo.io/code/shared/daveopml/">
			<outline text="package.json">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;daveopml&quot;,"/>
					<outline text="&quot;description&quot;: &quot;Read OPML files into JavaScript structures, correctly interpreting includes.&quot;,"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave@scripting.com&gt;&quot;,"/>
					<outline text="&quot;license&quot;: &quot;MIT&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.8&quot;,"/>
					<outline text="&quot;main&quot;: &quot;daveopml.js&quot;,"/>
					<outline text="&quot;repository&quot;: {">
						<outline text="&quot;type&quot;: &quot;git&quot;,"/>
						<outline text="&quot;url&quot;: &quot;https://github.com/scripting/opml.git&quot;"/>
						<outline text="},"/>
						</outline>
					<outline text="&quot;files&quot;: [">
						<outline text="&quot;daveopml.js&quot;"/>
						<outline text="],"/>
						</outline>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;request&quot;: &quot;*&quot;,"/>
						<outline text="&quot;stream&quot;: &quot;*&quot;,"/>
						<outline text="&quot;opmlparser&quot;: &quot;*&quot;"/>
						<outline text="} "/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="daveopml.js">
				<outline text="const myProductName = &quot;daveopml&quot;, myVersion = &quot;0.4.8&quot;;" created="Mon, 09 May 2022 19:40:15 GMT"/>
				<outline text="" created="Mon, 09 May 2022 19:40:16 GMT"/>
				<outline text="exports.readOpmlString = readOpmlString;"/>
				<outline text="exports.readOpmlFile = readOpmlFile;"/>
				<outline text="exports.readOpmlUrl = readOpmlUrl;"/>
				<outline text="exports.outlineVisiter = outlineVisiter;"/>
				<outline text="exports.processOpmlSubscriptionList = processOpmlSubscriptionList; //12/23/20 AM by DW"/>
				<outline text=""/>
				<outline text="const request = require (&quot;request&quot;);"/>
				<outline text="const stream = require (&quot;stream&quot;); //6/23/15 by DW"/>
				<outline text="const opmlParser = require (&quot;opmlparser&quot;); //6/23/15 by DW"/>
				<outline text="const fs = require (&quot;fs&quot;); //11/9/17 by DW"/>
				<outline text=""/>
				<outline text="Notes" isComment="true">
					<outline text="uses opmlparser">
						<outline text="For Node apps. To include this module, you must add this to the top of your source:">
							<outline text="var opmlParser = require (&quot;opmlparser&quot;);"/>
							</outline>
						<outline text="As well as including it in your package.json file"/>
						</outline>
					<outline text="how doc nodes are handled">
						<outline text="sometimes outlineVisiter needs to stop at doc nodes and go no deeper, and other times, when it's being used to copy an outline, it needs to ignore the fact that a node has a type att that indicates its a doc. that's why there's a new optional param, flStopAtDocs, that defaults to true (the old behavior)."/>
						</outline>
					</outline>
				<outline text=""/>
				<outline text="var opmlData = { ">
					<outline text="flUseOutlineCache: false,"/>
					<outline text="outlineCache: new Object (), "/>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="function getBoolean (val) { //12/5/13 by DW" created="Thu, 05 Dec 2013 13:36:54 GMT" pgfnum="33203">
					<outline text="Changes" isComment="true" created="Thu, 05 Dec 2013 13:53:35 GMT" pgfnum="33230">
						<outline text="12/5/13; 8:53:38 AM by DW" created="Thu, 05 Dec 2013 13:53:37 GMT" pgfnum="33231">
							<outline text="Created. Use this to get a boolean value from something that might not be a boolean. " created="Thu, 05 Dec 2013 13:53:39 GMT" pgfnum="33232"/>
							<outline text="For example, &quot;false&quot; should be the boolean value false, but in JavaScript, it's true. " created="Thu, 05 Dec 2013 13:54:18 GMT" pgfnum="33233"/>
							<outline text="So pass it through this routine to be safe. " created="Thu, 05 Dec 2013 13:54:42 GMT" pgfnum="33234"/>
							</outline>
						</outline>
					<outline text="switch (typeof (val)) {" created="Thu, 05 Dec 2013 13:38:37 GMT" pgfnum="33207">
						<outline text="case &quot;string&quot;:" created="Thu, 05 Dec 2013 13:38:50 GMT" pgfnum="33209">
							<outline text="if (val.toLowerCase () == &quot;true&quot;) {" created="Thu, 05 Dec 2013 13:39:59 GMT" pgfnum="33215">
								<outline text="return (true);" created="Thu, 05 Dec 2013 13:40:47 GMT" pgfnum="33219"/>
								<outline text="}" created="Thu, 05 Dec 2013 13:40:32 GMT" pgfnum="33216"/>
								</outline>
							<outline text="break;" created="Thu, 05 Dec 2013 13:40:55 GMT" pgfnum="33220"/>
							</outline>
						<outline text="case &quot;boolean&quot;:" created="Thu, 05 Dec 2013 13:38:57 GMT" pgfnum="33211">
							<outline text="return (val);" created="Thu, 05 Dec 2013 13:41:03 GMT" pgfnum="33221"/>
							</outline>
						<outline text="case &quot;number&quot;:" created="Thu, 05 Dec 2013 13:39:46 GMT" pgfnum="33213">
							<outline text="if (val == 1) {" created="Thu, 05 Dec 2013 13:41:11 GMT" pgfnum="33222">
								<outline text="return (true);" created="Thu, 05 Dec 2013 13:41:16 GMT" pgfnum="33223"/>
								<outline text="}" created="Thu, 05 Dec 2013 13:41:19 GMT" pgfnum="33224"/>
								</outline>
							<outline text="break;" created="Thu, 05 Dec 2013 13:39:50 GMT" pgfnum="33214"/>
							</outline>
						<outline text="}" created="Thu, 05 Dec 2013 13:38:45 GMT" pgfnum="33208"/>
						</outline>
					<outline text="return (false);" created="Thu, 05 Dec 2013 13:41:34 GMT" pgfnum="33225"/>
					<outline text="}" created="Thu, 05 Dec 2013 13:37:02 GMT" pgfnum="33206"/>
					</outline>
				<outline text="function getNameAtt (theNode) {">
					<outline text="function isAlpha (ch) {" created="Wed, 23 Jan 2013 15:16:34 GMT" pgfnum="17539">
						<outline text="return (((ch &gt;= 'a') &amp;&amp; (ch &lt;= 'z')) || ((ch &gt;= 'A') &amp;&amp; (ch &lt;= 'Z')));" created="Wed, 23 Jan 2013 15:17:06 GMT" pgfnum="17541"/>
						<outline text="}" created="Mon, 20 Jan 2014 04:13:24 GMT" pgfnum="35962"/>
						</outline>
					<outline text="function isNumeric (ch) {" created="Wed, 22 Jan 2014 15:27:48 GMT" pgfnum="36287">
						<outline text="return ((ch &gt;= '0') &amp;&amp; (ch &lt;= '9'));" created="Wed, 22 Jan 2014 15:27:56 GMT" pgfnum="36289"/>
						<outline text="}" created="Wed, 22 Jan 2014 15:27:53 GMT" pgfnum="36288"/>
						</outline>
					<outline text="function stripMarkup (s) { //5/24/14 by DW">
						<outline text="Changes" isComment="true">
							<outline text="6/9/14; 11:33:37 AM by DW">
								<outline text="River4 is crashing when we pass null to stripMarkup. So add some defensive driving."/>
								</outline>
							</outline>
						<outline text="if ((s === undefined) || (s == null) || (s.length == 0)) {">
							<outline text="return (&quot;&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="return (s.replace (/(&lt;([^&gt;]+)&gt;)/ig, &quot;&quot;));"/>
						<outline text="}"/>
						</outline>
					<outline text="function innerCaseName (text) { //8/12/14 by DW" created="Wed, 23 Jan 2013 19:04:20 GMT" pgfnum="17608">
						<outline text="var s = &quot;&quot;, ch, flNextUpper = false;" created="Wed, 23 Jan 2013 19:07:21 GMT" pgfnum="17610"/>
						<outline text="text = stripMarkup (text); " created="Sun, 30 Jun 2013 21:12:17 GMT" pgfnum="27487"/>
						<outline text="for (var i = 0; i &lt; text.length; i++) {" created="Wed, 23 Jan 2013 19:07:25 GMT" pgfnum="17611">
							<outline text="ch = text [i];" created="Wed, 23 Jan 2013 19:11:28 GMT" pgfnum="17618"/>
							<outline text="if (isAlpha (ch) || isNumeric (ch)) { " created="Wed, 23 Jan 2013 19:10:50 GMT" pgfnum="17616">
								<outline text="if (flNextUpper) {" created="Wed, 23 Jan 2013 19:12:50 GMT" pgfnum="17624">
									<outline text="ch = ch.toUpperCase ();" created="Wed, 23 Jan 2013 19:13:12 GMT" pgfnum="17628"/>
									<outline text="flNextUpper = false;" created="Wed, 23 Jan 2013 19:13:10 GMT" pgfnum="17627"/>
									<outline text="}"/>
									</outline>
								<outline text="else {" created="Wed, 23 Jan 2013 19:38:06 GMT" pgfnum="17637">
									<outline text="ch = ch.toLowerCase ();" created="Wed, 23 Jan 2013 19:13:12 GMT" pgfnum="17628"/>
									<outline text="}"/>
									</outline>
								<outline text="s += ch;" created="Wed, 23 Jan 2013 19:08:53 GMT" pgfnum="17613"/>
								<outline text="}"/>
								</outline>
							<outline text="else {" created="Wed, 23 Jan 2013 19:12:04 GMT" pgfnum="17619">
								<outline text="if (ch == ' ') { " created="Wed, 23 Jan 2013 19:12:12 GMT" pgfnum="17621">
									<outline text="flNextUpper = true;" created="Wed, 23 Jan 2013 19:12:25 GMT" pgfnum="17623"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="return (s);" created="Wed, 23 Jan 2013 19:09:53 GMT" pgfnum="17615"/>
						<outline text="}"/>
						</outline>
					<outline text="var nameatt = theNode.name;"/>
					<outline text="if (nameatt === undefined) {">
						<outline text="nameatt = innerCaseName (theNode.text);"/>
						<outline text="}"/>
						</outline>
					<outline text="return (nameatt);"/>
					<outline text="}"/>
					</outline>
				<outline text="function getNodeType (theNode) {">
					<outline text="if (theNode.type == &quot;include&quot;) {">
						<outline text="return (theNode.includetype); //this allows include nodes to have types"/>
						<outline text="}"/>
						</outline>
					<outline text="else {">
						<outline text="return (theNode.type);"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function copyScalars (source, dest) { //8/31/14 by DW">
					<outline text="Changes" isComment="true">
						<outline text="8/31/14; 4:53:19 PM by DW">
							<outline text="Copy the scalars from one struct to another."/>
							</outline>
						</outline>
					<outline text="for (var x in source) { ">
						<outline text="var type, val = source [x];" created="Thu, 12 Dec 2013 14:09:03 GMT" pgfnum="33476"/>
						<outline text="if (val instanceof Date) { " created="Tue, 07 Jan 2014 22:16:34 GMT" pgfnum="35506">
							<outline text="val = val.toString ();" created="Tue, 07 Jan 2014 22:17:30 GMT" pgfnum="35509"/>
							<outline text="}" created="Tue, 07 Jan 2014 22:16:51 GMT" pgfnum="35508"/>
							</outline>
						<outline text="type = typeof (val);" created="Tue, 07 Jan 2014 22:21:56 GMT" pgfnum="35510"/>
						<outline text="if ((type != &quot;object&quot;) &amp;&amp; (type != undefined)) {" created="Thu, 12 Dec 2013 14:08:43 GMT" pgfnum="33475">
							<outline text="dest [x] = val;" created="Thu, 12 Dec 2013 14:11:08 GMT" pgfnum="33479"/>
							<outline text="}" created="Thu, 12 Dec 2013 14:10:25 GMT" pgfnum="33478"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function outlineVisiter (theOutline, inlevelcallback, outlevelcallback, nodecallback, visitcompletecallback, flStopAtDocs) {">
					<outline text="Changes" isComment="true">
						<outline text="7/15/15; 9:32:52 AM by DW">
							<outline text="New optional param, flStopAtDocs. Default true. If false, we go into all nodes regardless of type. We need to do this when we're being called to copy an outline, as in expandIncludes, for example. "/>
							</outline>
						</outline>
					<outline text="function readInclude (theIncludeNode, callback) {">
						<outline text="console.log (&quot;readInclude: url == &quot; + theIncludeNode.url);"/>
						<outline text="readOpmlUrl (theIncludeNode.url, function (theOutline) {">
							<outline text="if (theOutline === undefined) {">
								<outline text="callback (undefined);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="expandIncludes (theOutline, function (expandedOutline) {">
									<outline text="callback (expandedOutline); "/>
									<outline text="}, flStopAtDocs);"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function typeIsDoc (theNode) {">
						<outline text="if (flStopAtDocs) {">
							<outline text="var type = getNodeType (theNode);"/>
							<outline text="return ((type !== undefined) &amp;&amp; (type != &quot;include&quot;) &amp;&amp; (type != &quot;link&quot;) &amp;&amp; (type != &quot;tweet&quot;));" created="Wed, 27 Nov 2013 19:18:41 GMT" pgfnum="32453"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="return (false);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function doLevel (head, path, levelcompletecallback) {">
						<outline text="function doOneSub (head, ixsub) {">
							<outline text="if ((head.subs !== undefined) &amp;&amp; (ixsub &lt; head.subs.length)) {">
								<outline text="var sub = head.subs [ixsub], subpath = path + getNameAtt (sub);"/>
								<outline text="if (!getBoolean (sub.iscomment)) { ">
									<outline text="if ((sub.type == &quot;include&quot;) &amp;&amp; (!typeIsDoc (sub))) {">
										<outline text="nodecallback (sub, subpath);"/>
										<outline text="readInclude (sub, function (theIncludedOutline) {">
											<outline text="if (theIncludedOutline !== undefined) {">
												<outline text="doLevel (theIncludedOutline, subpath + &quot;/&quot;, function () { ">
													<outline text="outlevelcallback ();"/>
													<outline text="doOneSub (head, ixsub +1);"/>
													<outline text="});"/>
													</outline>
												<outline text="}"/>
												</outline>
											<outline text="else { //6/25/15 by DW -- don't let errors derail us">
												<outline text="doOneSub (head, ixsub +1);"/>
												<outline text="}"/>
												</outline>
											<outline text="});"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="if (typeIsDoc (sub)) {">
											<outline text="if (sub.type == &quot;index&quot;) {">
												<outline text="subpath += &quot;/&quot;;"/>
												<outline text="}"/>
												</outline>
											<outline text="nodecallback (sub, subpath);"/>
											<outline text="doOneSub (head, ixsub +1);"/>
											<outline text="}"/>
											</outline>
										<outline text="else {">
											<outline text="nodecallback (sub, subpath);"/>
											<outline text="if (sub.subs !== undefined) {">
												<outline text="doLevel (sub, subpath + &quot;/&quot;, function () { ">
													<outline text="outlevelcallback ();"/>
													<outline text="doOneSub (head, ixsub +1);"/>
													<outline text="});"/>
													</outline>
												<outline text="}"/>
												</outline>
											<outline text="else {">
												<outline text="doOneSub (head, ixsub +1);"/>
												<outline text="}"/>
												</outline>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="doOneSub (head, ixsub +1);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="levelcompletecallback ();"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="inlevelcallback ();"/>
						<outline text="if (head.type == &quot;include&quot;) {">
							<outline text="readInclude (head, function (theIncludedOutline) {">
								<outline text="if (theIncludedOutline !== undefined) {">
									<outline text="doOneSub (theIncludedOutline, 0);"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="doOneSub (head, 0);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text=""/>
					<outline text="if (flStopAtDocs === undefined) { //7/15/15 by DW -- see note at top of routine">
						<outline text="flStopAtDocs = true;"/>
						<outline text="}"/>
						</outline>
					<outline text=""/>
					<outline text="doLevel (theOutline, &quot;&quot;, function () {">
						<outline text="outlevelcallback ();"/>
						<outline text="visitcompletecallback ();"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function expandIncludes (theOutline, callback, flStopAtDocs) {">
					<outline text="Changes" isComment="true">
						<outline text="5/18/15; 8:41:21 PM by DW">
							<outline text="Visit the outline, building a new outline, with all the include nodes expanded."/>
							</outline>
						</outline>
					<outline text="var theNewOutline = new Object (), lastNewNode = theNewOutline, stack = new Array (), currentOutline;"/>
					<outline text="function inlevelcallback () {">
						<outline text="stack [stack.length] = currentOutline;"/>
						<outline text="currentOutline = lastNewNode;"/>
						<outline text="if (currentOutline.subs === undefined) {">
							<outline text="currentOutline.subs = new Array ();"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function nodecallback (theNode, path) {">
						<outline text="" isComment="true"/>
						<outline text="console.log (&quot;nodecallback: level == &quot; + stack.length + &quot;, &quot; + theNode.text);" isComment="true"/>
						<outline text="" isComment="true"/>
						<outline text="var newNode = new Object ();"/>
						<outline text="copyScalars (theNode, newNode);"/>
						<outline text="currentOutline.subs [currentOutline.subs.length] = newNode;"/>
						<outline text="lastNewNode = newNode;"/>
						<outline text="}"/>
						</outline>
					<outline text="function outlevelcallback () {">
						<outline text="currentOutline = stack [stack.length - 1];"/>
						<outline text="stack.length--; //pop the stack"/>
						<outline text="}"/>
						</outline>
					<outline text=""/>
					<outline text="if (flStopAtDocs === undefined) { //7/15/15 by DW">
						<outline text="flStopAtDocs = true;"/>
						<outline text="}"/>
						</outline>
					<outline text=""/>
					<outline text="outlineVisiter (theOutline, inlevelcallback, outlevelcallback, nodecallback, function () {">
						<outline text="callback (theNewOutline);"/>
						<outline text="}, flStopAtDocs);"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function readOpmlString (s, callback, flExpandIncludes) {">
					<outline text="var opmlparser = new opmlParser ();"/>
					<outline text="var outlineArray = new Array ();"/>
					<outline text="var metadata = undefined;"/>
					<outline text="var flparseerror = false;"/>
					<outline text="var theStream = new stream.Readable ();"/>
					<outline text="theStream._read = function noop () {}; "/>
					<outline text="theStream.push (s);"/>
					<outline text="theStream.push (null);"/>
					<outline text="theStream.pipe (opmlparser);"/>
					<outline text=""/>
					<outline text="opmlparser.on (&quot;error&quot;, function (error) {">
						<outline text="console.log (&quot;readOpmlString: opml parser error == &quot; + error.message);"/>
						<outline text="if (callback != undefined) {">
							<outline text="callback (undefined, error);"/>
							<outline text="}"/>
							</outline>
						<outline text="flparseerror = true;"/>
						<outline text="});"/>
						</outline>
					<outline text="opmlparser.on (&quot;readable&quot;, function () {">
						<outline text="var outline;"/>
						<outline text="while (outline = this.read ()) {">
							<outline text="var ix = Number (outline [&quot;#id&quot;]);"/>
							<outline text="outlineArray [ix] = outline;"/>
							<outline text="if (metadata === undefined) {">
								<outline text="metadata = this.meta;"/>
								<outline text="}"/>
								</outline>
							<outline text="console.log (jsonStringify (this.meta));" isComment="true"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="opmlparser.on (&quot;end&quot;, function () {">
						<outline text="if (flparseerror) {">
							<outline text="return;"/>
							<outline text="}"/>
							</outline>
						<outline text="var theOutline = new Object ();"/>
						<outline text="theOutline.parent = undefined; //this is how you can tell you hit the top in a traversal to the summit" isComment="true"/>
						<outline text=""/>
						<outline text="//copy elements of the metadata object into the root of the outline">
							<outline text="function copyone (name) {">
								<outline text="if (metadata !== undefined) { //3/11/18 by DW">
									<outline text="var val = metadata [name];"/>
									<outline text="if ((val !== undefined) &amp;&amp; (val != null)) {">
										<outline text="console.log (&quot;theOutline.&quot; + name + &quot; == &quot; + val);" isComment="true"/>
										<outline text="theOutline [name] = val;"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="copyone (&quot;title&quot;);"/>
							<outline text="copyone (&quot;datecreated&quot;);"/>
							<outline text="copyone (&quot;datemodified&quot;);"/>
							<outline text="copyone (&quot;ownername&quot;);"/>
							<outline text="copyone (&quot;owneremail&quot;);"/>
							<outline text="copyone (&quot;description&quot;);"/>
							</outline>
						<outline text=""/>
						<outline text="console.log (&quot;readOpml: outlineArray == &quot; + jsonStringify (outlineArray));" isComment="true"/>
						<outline text="for (var i = 0; i &lt; outlineArray.length; i++) {">
							<outline text="var obj = outlineArray [i];"/>
							<outline text="if (obj != null) {">
								<outline text="var idparent = obj [&quot;#parentid&quot;], parent;"/>
								<outline text="if (idparent == 0) {">
									<outline text="parent = theOutline;"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="parent = outlineArray [idparent];"/>
									<outline text="}"/>
									</outline>
								<outline text="if (parent.subs === undefined) {">
									<outline text="parent.subs = new Array ();"/>
									<outline text="}"/>
									</outline>
								<outline text="parent.subs [parent.subs.length] = obj;"/>
								<outline text="console.log (&quot;id == &quot; + obj [&quot;#id&quot;] + &quot;, idparent == &quot; + idparent + &quot;: &quot; + obj.text);" isComment="true"/>
								<outline text="obj.parent = parent;" isComment="true"/>
								<outline text="delete obj [&quot;#id&quot;];"/>
								<outline text="delete obj [&quot;#parentid&quot;];"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="opmlData.outlineCache [urlOutline] = theOutline;" isComment="true"/>
						<outline text=""/>
						<outline text="if (flExpandIncludes === undefined) { //7/15/15 by DW">
							<outline text="flExpandIncludes = true;"/>
							<outline text="}"/>
							</outline>
						<outline text="if (flExpandIncludes) {">
							<outline text="expandIncludes (theOutline, function (expandedOutline) {">
								<outline text="if (callback != undefined) {">
									<outline text="callback (expandedOutline, undefined);"/>
									<outline text="}"/>
									</outline>
								<outline text="}, false);"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="if (callback != undefined) {">
								<outline text="callback (theOutline, undefined);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function readOpmlFile (f, callback, flExpandIncludes) {">
					<outline text="fs.readFile (f, function (err, data) {">
						<outline text="if (err) {">
							<outline text="console.log (&quot;readOpmlFile: error reading file &quot; + f + &quot; == &quot; + err.message)"/>
							<outline text="callback (undefined);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="readOpmlString (data.toString (), callback, flExpandIncludes);"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function readOpmlUrl (urlOutline, callback, flExpandIncludes) { ">
					<outline text="if (flExpandIncludes === undefined) {">
						<outline text="flExpandIncludes = true;"/>
						<outline text="}"/>
						</outline>
					<outline text="request (urlOutline, function (err, response, body) {">
						<outline text="if (err !== null) {">
							<outline text="console.log (&quot;readOpmlUrl: error reading file &quot; + urlOutline + &quot; == &quot; + err.message)"/>
							<outline text="callback (undefined);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="if (response.statusCode != 200) {">
								<outline text="console.log (&quot;readOpmlUrl: error reading file, statusCode == &quot; + response.statusCode + &quot;, urlOutline == &quot; + urlOutline)"/>
								<outline text="callback (undefined);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="readOpmlString (body.toString (), callback, flExpandIncludes);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function processOpmlSubscriptionList (opmltext, flExpandIncludes, callback) { //12/21/20 by DW">
					<outline text="readOpmlString (opmltext, function (theOutline) {">
						<outline text="if (theOutline !== undefined) {">
							<outline text="var feedlist = new Array ();"/>
							<outline text="function getFeeds (theOutline) {">
								<outline text="if (theOutline.subs !== undefined) {">
									<outline text="for (var i = 0; i &lt; theOutline.subs.length; i++) {">
										<outline text="var node = theOutline.subs [i];"/>
										<outline text="if (node.xmlurl !== undefined) {">
											<outline text="feedlist.push (node.xmlurl);"/>
											<outline text="}"/>
											</outline>
										<outline text="else {">
											<outline text="getFeeds (node);"/>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="getFeeds (theOutline);"/>
							<outline text="callback (feedlist);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="callback (undefined);"/>
							<outline text="}"/>
							</outline>
						<outline text="}, flExpandIncludes);"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="readme.md">
				<outline text="### Reading OPML into a structure">
					<outline text="This used to be part of &lt;a href=&quot;https://github.com/scripting/pagePark&quot;&gt;PagePark&lt;/a&gt;, but it seems too useful to bury there. Now that I know how to create an &lt;a href=&quot;https://www.npmjs.com/package/daveopml&quot;&gt;NPM object&lt;/a&gt;, this seemed a good thing to factor out. May a thousand JavaScript OPML apps bloom. "/>
					<outline text="&lt;code&gt;npm install daveopml&lt;/code&gt;"/>
					<outline text="If you have a question or comment, post an &lt;a href=&quot;https://github.com/scripting/opml/issues&quot;&gt;issue&lt;/a&gt; in the repository."/>
					<outline text="Dave Winer"/>
					</outline>
				<outline text="### Changes">
					<outline text="5/9/22 by DW" created="Mon, 09 May 2022 19:42:08 GMT">
						<outline text="We lost two versions, 0.4.6 and 0.4.7. They were in the GitHub repository, but the source we had was old. " created="Mon, 09 May 2022 19:42:09 GMT"/>
						<outline text="I was able to restore the changes. Basically one new interface routine was added, processOpmlSubscriptionList. " created="Mon, 09 May 2022 19:42:43 GMT"/>
						<outline text="I called the resulting version 0.4.8." created="Mon, 09 May 2022 19:43:12 GMT"/>
						<outline text="Also added source.opml to the repo to make this kind of thing easier in the future. " created="Mon, 09 May 2022 19:44:53 GMT"/>
						</outline>
					<outline text="1/24/18 by DW">
						<outline text="Added an optional flExpandIncludes param on readOpmlFile."/>
						</outline>
					</outline>
				</outline>
			<outline text="examples/readurl/read.js">
				<outline text="const utils = require (&quot;daveutils&quot;);"/>
				<outline text="const opml = require (&quot;daveopml&quot;);"/>
				<outline text=""/>
				<outline text="const urlOpmlFile = &quot;http://scripting.com/states.opml&quot;;"/>
				<outline text="const whenstart = new Date ();"/>
				<outline text=""/>
				<outline text="opml.readOpmlUrl (urlOpmlFile, function (theOpml) {">
					<outline text="if (theOpml === undefined) {">
						<outline text="console.log (&quot;There was an error reading the OPML file.&quot;);"/>
						<outline text="}"/>
						</outline>
					<outline text="else {">
						<outline text="console.log (&quot;It took &quot; + utils.secondsSince (whenstart) + &quot; seconds to read and parse the file.&quot;);"/>
						<outline text="console.log (utils.jsonStringify (theOpml));"/>
						<outline text="}"/>
						</outline>
					<outline text="});"/>
					</outline>
				</outline>
			<outline text="examples/readurl/package.json">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;example1&quot;,"/>
					<outline text="&quot;description&quot;: &quot;A test app for the daveopml package, reads the states outline from scripting.com, parses it, and displays some of the information.&quot;,"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave@smallpicture.com&gt;&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.0&quot;,"/>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;daveopml&quot;: &quot;*&quot;,"/>
						<outline text="&quot;daveutils&quot;: &quot;*&quot;"/>
						<outline text="}, "/>
						</outline>
					<outline text="&quot;license&quot;: &quot;MIT&quot;,"/>
					<outline text="&quot;engines&quot;: {">
						<outline text="&quot;node&quot;: &quot;*&quot;"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="examples/readfile/read.js">
				<outline text="const utils = require (&quot;daveutils&quot;);"/>
				<outline text="const opml = require (&quot;daveopml&quot;);"/>
				<outline text=""/>
				<outline text="const whenstart = new Date ();"/>
				<outline text=""/>
				<outline text="opml.readOpmlFile (&quot;states.opml&quot;, function (theOpml) {">
					<outline text="if (theOpml === undefined) {">
						<outline text="console.log (&quot;There was an error reading the OPML file.&quot;);"/>
						<outline text="}"/>
						</outline>
					<outline text="else {">
						<outline text="console.log (&quot;It took &quot; + utils.secondsSince (whenstart) + &quot; seconds to read and parse the file.&quot;);"/>
						<outline text="console.log (utils.jsonStringify (theOpml));"/>
						<outline text="}"/>
						</outline>
					<outline text="});"/>
					</outline>
				</outline>
			<outline text="examples/readfile/package.json">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;example2&quot;,"/>
					<outline text="&quot;description&quot;: &quot;A test app for the daveopml package, reads the states outline from a local file, parses it, and displays some of the information.&quot;,"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave@smallpicture.com&gt;&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.0&quot;,"/>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;daveopml&quot;: &quot;*&quot;,"/>
						<outline text="&quot;daveutils&quot;: &quot;*&quot;"/>
						<outline text="}, "/>
						</outline>
					<outline text="&quot;license&quot;: &quot;MIT&quot;,"/>
					<outline text="&quot;engines&quot;: {">
						<outline text="&quot;node&quot;: &quot;*&quot;"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="examples/readfile/states.opml">
				<outline text="United States">
					<outline text="Far West">
						<outline text="Alaska"/>
						<outline text="California"/>
						<outline text="Hawaii"/>
						<outline text="Nevada">
							<outline text="Reno" created="Tue, 12 Jul 2005 23:56:35 GMT"/>
							<outline text="Las Vegas" created="Tue, 12 Jul 2005 23:56:37 GMT"/>
							<outline text="Ely" created="Tue, 12 Jul 2005 23:56:39 GMT"/>
							<outline text="Gerlach" created="Tue, 12 Jul 2005 23:56:47 GMT"/>
							</outline>
						<outline text="Oregon"/>
						<outline text="Washington"/>
						</outline>
					<outline text="Great Plains">
						<outline text="Kansas"/>
						<outline text="Nebraska"/>
						<outline text="North Dakota"/>
						<outline text="Oklahoma"/>
						<outline text="South Dakota"/>
						</outline>
					<outline text="Mid-Atlantic">
						<outline text="Delaware"/>
						<outline text="Maryland"/>
						<outline text="New Jersey"/>
						<outline text="New York"/>
						<outline text="Pennsylvania"/>
						</outline>
					<outline text="Midwest">
						<outline text="Illinois"/>
						<outline text="Indiana"/>
						<outline text="Iowa"/>
						<outline text="Kentucky"/>
						<outline text="Michigan"/>
						<outline text="Minnesota"/>
						<outline text="Missouri"/>
						<outline text="Ohio"/>
						<outline text="West Virginia"/>
						<outline text="Wisconsin"/>
						</outline>
					<outline text="Mountains">
						<outline text="Colorado"/>
						<outline text="Idaho"/>
						<outline text="Montana"/>
						<outline text="Utah"/>
						<outline text="Wyoming"/>
						</outline>
					<outline text="New England">
						<outline text="Connecticut"/>
						<outline text="Maine"/>
						<outline text="Massachusetts"/>
						<outline text="New Hampshire"/>
						<outline text="Rhode Island"/>
						<outline text="Vermont"/>
						</outline>
					<outline text="South">
						<outline text="Alabama"/>
						<outline text="Arkansas"/>
						<outline text="Florida"/>
						<outline text="Georgia"/>
						<outline text="Louisiana"/>
						<outline text="Mississippi"/>
						<outline text="North Carolina"/>
						<outline text="South Carolina"/>
						<outline text="Tennessee"/>
						<outline text="Virginia"/>
						</outline>
					<outline text="Southwest">
						<outline text="Arizona"/>
						<outline text="New Mexico"/>
						<outline text="Texas"/>
						</outline>
					</outline>
				</outline>
			</outline>
		<outline text="/scripting.com/" isComment="true">
			<outline text="states.opml">
				<outline text="United States">
					<outline text="Far West">
						<outline text="Alaska"/>
						<outline text="California"/>
						<outline text="Hawaii"/>
						<outline text="Nevada">
							<outline text="Reno" created="Tue, 12 Jul 2005 23:56:35 GMT"/>
							<outline text="Las Vegas" created="Tue, 12 Jul 2005 23:56:37 GMT"/>
							<outline text="Ely" created="Tue, 12 Jul 2005 23:56:39 GMT"/>
							<outline text="Gerlach" created="Tue, 12 Jul 2005 23:56:47 GMT"/>
							</outline>
						<outline text="Oregon"/>
						<outline text="Washington"/>
						</outline>
					<outline text="Great Plains">
						<outline text="Kansas"/>
						<outline text="Nebraska"/>
						<outline text="North Dakota"/>
						<outline text="Oklahoma"/>
						<outline text="South Dakota"/>
						</outline>
					<outline text="Mid-Atlantic">
						<outline text="Delaware"/>
						<outline text="Maryland"/>
						<outline text="New Jersey"/>
						<outline text="New York"/>
						<outline text="Pennsylvania"/>
						</outline>
					<outline text="Midwest">
						<outline text="Illinois"/>
						<outline text="Indiana"/>
						<outline text="Iowa"/>
						<outline text="Kentucky"/>
						<outline text="Michigan"/>
						<outline text="Minnesota"/>
						<outline text="Missouri"/>
						<outline text="Ohio"/>
						<outline text="West Virginia"/>
						<outline text="Wisconsin"/>
						</outline>
					<outline text="Mountains">
						<outline text="Colorado"/>
						<outline text="Idaho"/>
						<outline text="Montana"/>
						<outline text="Utah"/>
						<outline text="Wyoming"/>
						</outline>
					<outline text="New England">
						<outline text="Connecticut"/>
						<outline text="Maine"/>
						<outline text="Massachusetts"/>
						<outline text="New Hampshire"/>
						<outline text="Rhode Island"/>
						<outline text="Vermont"/>
						</outline>
					<outline text="South">
						<outline text="Alabama"/>
						<outline text="Arkansas"/>
						<outline text="Florida"/>
						<outline text="Georgia"/>
						<outline text="Louisiana"/>
						<outline text="Mississippi"/>
						<outline text="North Carolina"/>
						<outline text="South Carolina"/>
						<outline text="Tennessee"/>
						<outline text="Virginia"/>
						</outline>
					<outline text="Southwest">
						<outline text="Arizona"/>
						<outline text="New Mexico"/>
						<outline text="Texas"/>
						</outline>
					</outline>
				</outline>
			</outline>
		<outline text="/fargo.io/code/shared/" isComment="true">
			<outline text="opml.js">
				<outline text="Notes" isComment="true">
					<outline text="uses opmlparser">
						<outline text="For Node apps. To include this module, you must add this to the top of your source:">
							<outline text="var opmlParser = require (&quot;opmlparser&quot;);"/>
							</outline>
						<outline text="As well as including it in your package.json file"/>
						</outline>
					<outline text="how doc nodes are handled">
						<outline text="sometimes outlineVisiter needs to stop at doc nodes and go no deeper, and other times, when it's being used to copy an outline, it needs to ignore the fact that a node has a type att that indicates its a doc. that's why there's a new optional param, flStopAtDocs, that defaults to true (the old behavior)."/>
						</outline>
					</outline>
				<outline text=""/>
				<outline text="var opmlData = { ">
					<outline text="flUseOutlineCache: false,"/>
					<outline text="outlineCache: new Object (), "/>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="function getBoolean (val) { //12/5/13 by DW" created="Thu, 05 Dec 2013 13:36:54 GMT" pgfnum="33203">
					<outline text="Changes" isComment="true" created="Thu, 05 Dec 2013 13:53:35 GMT" pgfnum="33230">
						<outline text="12/5/13; 8:53:38 AM by DW" created="Thu, 05 Dec 2013 13:53:37 GMT" pgfnum="33231">
							<outline text="Created. Use this to get a boolean value from something that might not be a boolean. " created="Thu, 05 Dec 2013 13:53:39 GMT" pgfnum="33232"/>
							<outline text="For example, &quot;false&quot; should be the boolean value false, but in JavaScript, it's true. " created="Thu, 05 Dec 2013 13:54:18 GMT" pgfnum="33233"/>
							<outline text="So pass it through this routine to be safe. " created="Thu, 05 Dec 2013 13:54:42 GMT" pgfnum="33234"/>
							</outline>
						</outline>
					<outline text="switch (typeof (val)) {" created="Thu, 05 Dec 2013 13:38:37 GMT" pgfnum="33207">
						<outline text="case &quot;string&quot;:" created="Thu, 05 Dec 2013 13:38:50 GMT" pgfnum="33209">
							<outline text="if (val.toLowerCase () == &quot;true&quot;) {" created="Thu, 05 Dec 2013 13:39:59 GMT" pgfnum="33215">
								<outline text="return (true);" created="Thu, 05 Dec 2013 13:40:47 GMT" pgfnum="33219"/>
								<outline text="}" created="Thu, 05 Dec 2013 13:40:32 GMT" pgfnum="33216"/>
								</outline>
							<outline text="break;" created="Thu, 05 Dec 2013 13:40:55 GMT" pgfnum="33220"/>
							</outline>
						<outline text="case &quot;boolean&quot;:" created="Thu, 05 Dec 2013 13:38:57 GMT" pgfnum="33211">
							<outline text="return (val);" created="Thu, 05 Dec 2013 13:41:03 GMT" pgfnum="33221"/>
							</outline>
						<outline text="case &quot;number&quot;:" created="Thu, 05 Dec 2013 13:39:46 GMT" pgfnum="33213">
							<outline text="if (val == 1) {" created="Thu, 05 Dec 2013 13:41:11 GMT" pgfnum="33222">
								<outline text="return (true);" created="Thu, 05 Dec 2013 13:41:16 GMT" pgfnum="33223"/>
								<outline text="}" created="Thu, 05 Dec 2013 13:41:19 GMT" pgfnum="33224"/>
								</outline>
							<outline text="break;" created="Thu, 05 Dec 2013 13:39:50 GMT" pgfnum="33214"/>
							</outline>
						<outline text="}" created="Thu, 05 Dec 2013 13:38:45 GMT" pgfnum="33208"/>
						</outline>
					<outline text="return (false);" created="Thu, 05 Dec 2013 13:41:34 GMT" pgfnum="33225"/>
					<outline text="}" created="Thu, 05 Dec 2013 13:37:02 GMT" pgfnum="33206"/>
					</outline>
				<outline text="function getNameAtt (theNode) {">
					<outline text="function isAlpha (ch) {" created="Wed, 23 Jan 2013 15:16:34 GMT" pgfnum="17539">
						<outline text="return (((ch &gt;= 'a') &amp;&amp; (ch &lt;= 'z')) || ((ch &gt;= 'A') &amp;&amp; (ch &lt;= 'Z')));" created="Wed, 23 Jan 2013 15:17:06 GMT" pgfnum="17541"/>
						<outline text="}" created="Mon, 20 Jan 2014 04:13:24 GMT" pgfnum="35962"/>
						</outline>
					<outline text="function isNumeric (ch) {" created="Wed, 22 Jan 2014 15:27:48 GMT" pgfnum="36287">
						<outline text="return ((ch &gt;= '0') &amp;&amp; (ch &lt;= '9'));" created="Wed, 22 Jan 2014 15:27:56 GMT" pgfnum="36289"/>
						<outline text="}" created="Wed, 22 Jan 2014 15:27:53 GMT" pgfnum="36288"/>
						</outline>
					<outline text="function stripMarkup (s) { //5/24/14 by DW">
						<outline text="Changes" isComment="true">
							<outline text="6/9/14; 11:33:37 AM by DW">
								<outline text="River4 is crashing when we pass null to stripMarkup. So add some defensive driving."/>
								</outline>
							</outline>
						<outline text="if ((s === undefined) || (s == null) || (s.length == 0)) {">
							<outline text="return (&quot;&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="return (s.replace (/(&lt;([^&gt;]+)&gt;)/ig, &quot;&quot;));"/>
						<outline text="}"/>
						</outline>
					<outline text="function innerCaseName (text) { //8/12/14 by DW" created="Wed, 23 Jan 2013 19:04:20 GMT" pgfnum="17608">
						<outline text="var s = &quot;&quot;, ch, flNextUpper = false;" created="Wed, 23 Jan 2013 19:07:21 GMT" pgfnum="17610"/>
						<outline text="text = stripMarkup (text); " created="Sun, 30 Jun 2013 21:12:17 GMT" pgfnum="27487"/>
						<outline text="for (var i = 0; i &lt; text.length; i++) {" created="Wed, 23 Jan 2013 19:07:25 GMT" pgfnum="17611">
							<outline text="ch = text [i];" created="Wed, 23 Jan 2013 19:11:28 GMT" pgfnum="17618"/>
							<outline text="if (isAlpha (ch) || isNumeric (ch)) { " created="Wed, 23 Jan 2013 19:10:50 GMT" pgfnum="17616">
								<outline text="if (flNextUpper) {" created="Wed, 23 Jan 2013 19:12:50 GMT" pgfnum="17624">
									<outline text="ch = ch.toUpperCase ();" created="Wed, 23 Jan 2013 19:13:12 GMT" pgfnum="17628"/>
									<outline text="flNextUpper = false;" created="Wed, 23 Jan 2013 19:13:10 GMT" pgfnum="17627"/>
									<outline text="}"/>
									</outline>
								<outline text="else {" created="Wed, 23 Jan 2013 19:38:06 GMT" pgfnum="17637">
									<outline text="ch = ch.toLowerCase ();" created="Wed, 23 Jan 2013 19:13:12 GMT" pgfnum="17628"/>
									<outline text="}"/>
									</outline>
								<outline text="s += ch;" created="Wed, 23 Jan 2013 19:08:53 GMT" pgfnum="17613"/>
								<outline text="}"/>
								</outline>
							<outline text="else {" created="Wed, 23 Jan 2013 19:12:04 GMT" pgfnum="17619">
								<outline text="if (ch == ' ') { " created="Wed, 23 Jan 2013 19:12:12 GMT" pgfnum="17621">
									<outline text="flNextUpper = true;" created="Wed, 23 Jan 2013 19:12:25 GMT" pgfnum="17623"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="return (s);" created="Wed, 23 Jan 2013 19:09:53 GMT" pgfnum="17615"/>
						<outline text="}"/>
						</outline>
					<outline text="var nameatt = theNode.name;"/>
					<outline text="if (nameatt === undefined) {">
						<outline text="nameatt = innerCaseName (theNode.text);"/>
						<outline text="}"/>
						</outline>
					<outline text="return (nameatt);"/>
					<outline text="}"/>
					</outline>
				<outline text="function getNodeType (theNode) {">
					<outline text="if (theNode.type == &quot;include&quot;) {">
						<outline text="return (theNode.includetype); //this allows include nodes to have types"/>
						<outline text="}"/>
						</outline>
					<outline text="else {">
						<outline text="return (theNode.type);"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function copyScalars (source, dest) { //8/31/14 by DW">
					<outline text="Changes" isComment="true">
						<outline text="8/31/14; 4:53:19 PM by DW">
							<outline text="Copy the scalars from one struct to another."/>
							</outline>
						</outline>
					<outline text="for (var x in source) { ">
						<outline text="var type, val = source [x];" created="Thu, 12 Dec 2013 14:09:03 GMT" pgfnum="33476"/>
						<outline text="if (val instanceof Date) { " created="Tue, 07 Jan 2014 22:16:34 GMT" pgfnum="35506">
							<outline text="val = val.toString ();" created="Tue, 07 Jan 2014 22:17:30 GMT" pgfnum="35509"/>
							<outline text="}" created="Tue, 07 Jan 2014 22:16:51 GMT" pgfnum="35508"/>
							</outline>
						<outline text="type = typeof (val);" created="Tue, 07 Jan 2014 22:21:56 GMT" pgfnum="35510"/>
						<outline text="if ((type != &quot;object&quot;) &amp;&amp; (type != undefined)) {" created="Thu, 12 Dec 2013 14:08:43 GMT" pgfnum="33475">
							<outline text="dest [x] = val;" created="Thu, 12 Dec 2013 14:11:08 GMT" pgfnum="33479"/>
							<outline text="}" created="Thu, 12 Dec 2013 14:10:25 GMT" pgfnum="33478"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function outlineVisiter (theOutline, inlevelcallback, outlevelcallback, nodecallback, visitcompletecallback, flStopAtDocs) {">
					<outline text="Changes" isComment="true">
						<outline text="7/15/15; 9:32:52 AM by DW">
							<outline text="New optional param, flStopAtDocs. Default true. If false, we go into all nodes regardless of type. We need to do this when we're being called to copy an outline, as in expandIncludes, for example. "/>
							</outline>
						</outline>
					<outline text="function readInclude (theIncludeNode, callback) {">
						<outline text="console.log (&quot;readInclude: url == &quot; + theIncludeNode.url);"/>
						<outline text="readOpmlUrl (theIncludeNode.url, function (theOutline) {">
							<outline text="if (theOutline === undefined) {">
								<outline text="callback (undefined);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="expandIncludes (theOutline, function (expandedOutline) {">
									<outline text="callback (expandedOutline); "/>
									<outline text="}, flStopAtDocs);"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function typeIsDoc (theNode) {">
						<outline text="if (flStopAtDocs) {">
							<outline text="var type = getNodeType (theNode);"/>
							<outline text="return ((type !== undefined) &amp;&amp; (type != &quot;include&quot;) &amp;&amp; (type != &quot;link&quot;) &amp;&amp; (type != &quot;tweet&quot;));" created="Wed, 27 Nov 2013 19:18:41 GMT" pgfnum="32453"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="return (false);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function doLevel (head, path, levelcompletecallback) {">
						<outline text="function doOneSub (head, ixsub) {">
							<outline text="if ((head.subs !== undefined) &amp;&amp; (ixsub &lt; head.subs.length)) {">
								<outline text="var sub = head.subs [ixsub], subpath = path + getNameAtt (sub);"/>
								<outline text="if (!getBoolean (sub.iscomment)) { ">
									<outline text="if ((sub.type == &quot;include&quot;) &amp;&amp; (!typeIsDoc (sub))) {">
										<outline text="nodecallback (sub, subpath);"/>
										<outline text="readInclude (sub, function (theIncludedOutline) {">
											<outline text="if (theIncludedOutline !== undefined) {">
												<outline text="doLevel (theIncludedOutline, subpath + &quot;/&quot;, function () { ">
													<outline text="outlevelcallback ();"/>
													<outline text="doOneSub (head, ixsub +1);"/>
													<outline text="});"/>
													</outline>
												<outline text="}"/>
												</outline>
											<outline text="else { //6/25/15 by DW -- don't let errors derail us">
												<outline text="doOneSub (head, ixsub +1);"/>
												<outline text="}"/>
												</outline>
											<outline text="});"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="if (typeIsDoc (sub)) {">
											<outline text="if (sub.type == &quot;index&quot;) {">
												<outline text="subpath += &quot;/&quot;;"/>
												<outline text="}"/>
												</outline>
											<outline text="nodecallback (sub, subpath);"/>
											<outline text="doOneSub (head, ixsub +1);"/>
											<outline text="}"/>
											</outline>
										<outline text="else {">
											<outline text="nodecallback (sub, subpath);"/>
											<outline text="if (sub.subs !== undefined) {">
												<outline text="doLevel (sub, subpath + &quot;/&quot;, function () { ">
													<outline text="outlevelcallback ();"/>
													<outline text="doOneSub (head, ixsub +1);"/>
													<outline text="});"/>
													</outline>
												<outline text="}"/>
												</outline>
											<outline text="else {">
												<outline text="doOneSub (head, ixsub +1);"/>
												<outline text="}"/>
												</outline>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="doOneSub (head, ixsub +1);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="levelcompletecallback ();"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="inlevelcallback ();"/>
						<outline text="if (head.type == &quot;include&quot;) {">
							<outline text="readInclude (head, function (theIncludedOutline) {">
								<outline text="if (theIncludedOutline !== undefined) {">
									<outline text="doOneSub (theIncludedOutline, 0);"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="doOneSub (head, 0);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text=""/>
					<outline text="if (flStopAtDocs === undefined) { //7/15/15 by DW -- see note at top of routine">
						<outline text="flStopAtDocs = true;"/>
						<outline text="}"/>
						</outline>
					<outline text=""/>
					<outline text="doLevel (theOutline, &quot;&quot;, function () {">
						<outline text="outlevelcallback ();"/>
						<outline text="visitcompletecallback ();"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function expandIncludes (theOutline, callback, flStopAtDocs) {">
					<outline text="Changes" isComment="true">
						<outline text="5/18/15; 8:41:21 PM by DW">
							<outline text="Visit the outline, building a new outline, with all the include nodes expanded."/>
							</outline>
						</outline>
					<outline text="var theNewOutline = new Object (), lastNewNode = theNewOutline, stack = new Array (), currentOutline;"/>
					<outline text="function inlevelcallback () {">
						<outline text="stack [stack.length] = currentOutline;"/>
						<outline text="currentOutline = lastNewNode;"/>
						<outline text="if (currentOutline.subs === undefined) {">
							<outline text="currentOutline.subs = new Array ();"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function nodecallback (theNode, path) {">
						<outline text="" isComment="true"/>
						<outline text="console.log (&quot;nodecallback: level == &quot; + stack.length + &quot;, &quot; + theNode.text);" isComment="true"/>
						<outline text="" isComment="true"/>
						<outline text="var newNode = new Object ();"/>
						<outline text="copyScalars (theNode, newNode);"/>
						<outline text="currentOutline.subs [currentOutline.subs.length] = newNode;"/>
						<outline text="lastNewNode = newNode;"/>
						<outline text="}"/>
						</outline>
					<outline text="function outlevelcallback () {">
						<outline text="currentOutline = stack [stack.length - 1];"/>
						<outline text="stack.length--; //pop the stack"/>
						<outline text="}"/>
						</outline>
					<outline text=""/>
					<outline text="if (flStopAtDocs === undefined) { //7/15/15 by DW">
						<outline text="flStopAtDocs = true;"/>
						<outline text="}"/>
						</outline>
					<outline text=""/>
					<outline text="outlineVisiter (theOutline, inlevelcallback, outlevelcallback, nodecallback, function () {">
						<outline text="callback (theNewOutline);"/>
						<outline text="}, flStopAtDocs);"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function readOpmlString (s, callback, flExpandIncludes) {">
					<outline text="var opmlparser = new opmlParser ();"/>
					<outline text="var outlineArray = new Array ();"/>
					<outline text="var metadata = undefined;"/>
					<outline text="var flparseerror = false;"/>
					<outline text="var theStream = new stream.Readable ();"/>
					<outline text="theStream._read = function noop () {}; "/>
					<outline text="theStream.push (s);"/>
					<outline text="theStream.push (null);"/>
					<outline text="theStream.pipe (opmlparser);"/>
					<outline text=""/>
					<outline text="opmlparser.on (&quot;error&quot;, function (error) {">
						<outline text="console.log (&quot;readOpmlString: opml parser error == &quot; + error.message);"/>
						<outline text="if (callback != undefined) {">
							<outline text="callback (undefined, error);"/>
							<outline text="}"/>
							</outline>
						<outline text="flparseerror = true;"/>
						<outline text="});"/>
						</outline>
					<outline text="opmlparser.on (&quot;readable&quot;, function () {">
						<outline text="var outline;"/>
						<outline text="while (outline = this.read ()) {">
							<outline text="var ix = Number (outline [&quot;#id&quot;]);"/>
							<outline text="outlineArray [ix] = outline;"/>
							<outline text="if (metadata === undefined) {">
								<outline text="metadata = this.meta;"/>
								<outline text="}"/>
								</outline>
							<outline text="console.log (jsonStringify (this.meta));" isComment="true"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="opmlparser.on (&quot;end&quot;, function () {">
						<outline text="if (flparseerror) {">
							<outline text="return;"/>
							<outline text="}"/>
							</outline>
						<outline text="var theOutline = new Object ();"/>
						<outline text="theOutline.parent = undefined; //this is how you can tell you hit the top in a traversal to the summit" isComment="true"/>
						<outline text=""/>
						<outline text="//copy elements of the metadata object into the root of the outline">
							<outline text="function copyone (name) {">
								<outline text="var val = metadata [name];"/>
								<outline text="if ((val !== undefined) &amp;&amp; (val != null)) {">
									<outline text="console.log (&quot;theOutline.&quot; + name + &quot; == &quot; + val);" isComment="true"/>
									<outline text="theOutline [name] = val;"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="copyone (&quot;title&quot;);"/>
							<outline text="copyone (&quot;datecreated&quot;);"/>
							<outline text="copyone (&quot;datemodified&quot;);"/>
							<outline text="copyone (&quot;ownername&quot;);"/>
							<outline text="copyone (&quot;owneremail&quot;);"/>
							<outline text="copyone (&quot;description&quot;);"/>
							</outline>
						<outline text=""/>
						<outline text="console.log (&quot;readOpml: outlineArray == &quot; + jsonStringify (outlineArray));" isComment="true"/>
						<outline text="for (var i = 0; i &lt; outlineArray.length; i++) {">
							<outline text="var obj = outlineArray [i];"/>
							<outline text="if (obj != null) {">
								<outline text="var idparent = obj [&quot;#parentid&quot;], parent;"/>
								<outline text="if (idparent == 0) {">
									<outline text="parent = theOutline;"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="parent = outlineArray [idparent];"/>
									<outline text="}"/>
									</outline>
								<outline text="if (parent.subs === undefined) {">
									<outline text="parent.subs = new Array ();"/>
									<outline text="}"/>
									</outline>
								<outline text="parent.subs [parent.subs.length] = obj;"/>
								<outline text="console.log (&quot;id == &quot; + obj [&quot;#id&quot;] + &quot;, idparent == &quot; + idparent + &quot;: &quot; + obj.text);" isComment="true"/>
								<outline text="obj.parent = parent;" isComment="true"/>
								<outline text="delete obj [&quot;#id&quot;];"/>
								<outline text="delete obj [&quot;#parentid&quot;];"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="opmlData.outlineCache [urlOutline] = theOutline;" isComment="true"/>
						<outline text=""/>
						<outline text="if (flExpandIncludes === undefined) { //7/15/15 by DW">
							<outline text="flExpandIncludes = true;"/>
							<outline text="}"/>
							</outline>
						<outline text="if (flExpandIncludes) {">
							<outline text="expandIncludes (theOutline, function (expandedOutline) {">
								<outline text="if (callback != undefined) {">
									<outline text="callback (expandedOutline, undefined);"/>
									<outline text="}"/>
									</outline>
								<outline text="}, false);"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="if (callback != undefined) {">
								<outline text="callback (theOutline, undefined);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function readOpmlFile (f, callback) { //6/25/15 by DW ">
					<outline text="fs.readFile (f, function (err, data) {">
						<outline text="if (err) {">
							<outline text="console.log (&quot;readOpmlFile: error reading file &quot; + f + &quot; == &quot; + err.message)"/>
							<outline text="callback (undefined);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="readOpmlString (data.toString (), callback);"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function readOpmlUrl (urlOutline, callback, flExpandIncludes) { ">
					<outline text="if (flExpandIncludes === undefined) {">
						<outline text="flExpandIncludes = true;"/>
						<outline text="}"/>
						</outline>
					<outline text="request (urlOutline, function (err, response, body) {">
						<outline text="if (err !== null) {">
							<outline text="console.log (&quot;readOpmlUrl: error reading file &quot; + urlOutline + &quot; == &quot; + err.message)"/>
							<outline text="callback (undefined);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="if (response.statusCode != 200) {">
								<outline text="console.log (&quot;readOpmlUrl: error reading file, statusCode == &quot; + response.statusCode + &quot;, urlOutline == &quot; + urlOutline)"/>
								<outline text="callback (undefined);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="readOpmlString (body.toString (), callback, flExpandIncludes);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			</outline>
		<outline text="/fargo.io/code/testing/opml/">
			<outline text="testopml.js">
				<outline text="var request = require (&quot;request&quot;);"/>
				<outline text="var opmlParser = require (&quot;opmlparser&quot;);"/>
				<outline text="var fs = require (&quot;fs&quot;);"/>
				<outline text="var stream = require (&quot;stream&quot;);"/>
				<outline text=""/>
				<outline text="var urlOpml = &quot;http://fargo.io/code/worldoutline/outlines/scratchpad.opml&quot;;" isComment="true"/>
				<outline text="var urlOpml = &quot;http://liveblog.co/users/davewiner/outlines/outline002.opml&quot;;" isComment="true"/>
				<outline text="var urlOpml = &quot;http://hosting.opml.org/dave/states.opml&quot;;" isComment="true"/>
				<outline text="var urlOpml = &quot;http://fargo.io/code/testing/opml/test.opml&quot;;" isComment="true"/>
				<outline text="var urlOpml = &quot;http://fargo.io/code/testing/opml/test2.opml&quot;; //this makes it fail"/>
				<outline text=""/>
				<outline text="[[http://fargo.io/code/node/shared/utils.js]]"/>
				<outline text="[[http://fargo.io/code/shared/opml.js]]"/>
				<outline text=""/>
				<outline text="console.log (&quot;urlOpml == &quot; + urlOpml);"/>
				<outline text=""/>
				<outline text="readOpmlUrl (urlOpml, function (theOutline) {">
					<outline text="console.log (jsonStringify (theOutline));"/>
					<outline text="});"/>
					</outline>
				<outline text=""/>
				<outline text=""/>
				<outline text=""/>
				<outline text=""/>
				<outline text="readOpmlFile (&quot;test.opml&quot;, function (theOutline) {" isComment="true">
					<outline text="console.log (jsonStringify (theOutline));"/>
					<outline text="});"/>
					</outline>
				<outline text=""/>
				<outline text="fs.readFile (&quot;test.opml&quot;, function (err, data) {" isComment="true">
					<outline text="if (err) {">
						<outline text="console.log (&quot;error reading file &quot; + f + &quot; == &quot; + err.message)"/>
						<outline text="}"/>
						</outline>
					<outline text="else {">
						<outline text="readOpmlString (data.toString (), function (theOutline) {">
							<outline text="console.log (jsonStringify (theOutline));"/>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="});"/>
					</outline>
				</outline>
			<outline text="testopml2.js">
				<outline text="const opml = require (&quot;daveopml&quot;);"/>
				<outline text=""/>
				<outline text="var urlOpml = &quot;http://hosting.opml.org/dave/states.opml&quot;;" isComment="true"/>
				<outline text="var urlOpml = &quot;http://fargo.io/code/worldoutline/outlines/scratchpad.opml&quot;;"/>
				<outline text="var urlOpml = &quot;http://liveblog.co/users/davewiner/outlines/outline002.opml&quot;;" isComment="true"/>
				<outline text="var urlOpml = &quot;http://fargo.io/code/testing/opml/test.opml&quot;;" isComment="true"/>
				<outline text="var urlOpml = &quot;http://fargo.io/code/testing/opml/test2.opml&quot;; //this makes it fail" isComment="true"/>
				<outline text=""/>
				<outline text="console.log (&quot;urlOpml == &quot; + urlOpml);"/>
				<outline text=""/>
				<outline text="opml.readOpmlUrl (urlOpml, function (theOutline) {">
					<outline text="console.log (JSON.stringify (theOutline, undefined, 4));"/>
					<outline text="});"/>
					</outline>
				<outline text=""/>
				<outline text=""/>
				<outline text=""/>
				<outline text=""/>
				<outline text="readOpmlFile (&quot;test.opml&quot;, function (theOutline) {" isComment="true">
					<outline text="console.log (jsonStringify (theOutline));"/>
					<outline text="});"/>
					</outline>
				<outline text=""/>
				<outline text="fs.readFile (&quot;test.opml&quot;, function (err, data) {" isComment="true">
					<outline text="if (err) {">
						<outline text="console.log (&quot;error reading file &quot; + f + &quot; == &quot; + err.message)"/>
						<outline text="}"/>
						</outline>
					<outline text="else {">
						<outline text="readOpmlString (data.toString (), function (theOutline) {">
							<outline text="console.log (jsonStringify (theOutline));"/>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="});"/>
					</outline>
				</outline>
			<outline text="test.opml">
				<outline text="plain line"/>
				<outline text="an include" type="include" url="http://hosting.opml.org/dave/states.opml"/>
				<outline text="another plain line"/>
				</outline>
			<outline text="test2.opml">
				<outline text="July 2015" created="Wed, 01 Jul 2015 19:07:46 GMT" name="july2015">
					<outline text="July 12" created="Sun, 12 Jul 2015 19:39:09 GMT" name="12">
						<outline text="This is a test" created="Sun, 12 Jul 2015 19:39:10 GMT" hash="9ab1abda0c43c297aa8a4dec2f773f56" name="thisIsATest" type="outline">
							<outline text="11" created="Sun, 12 Jul 2015 19:39:12 GMT"/>
							<outline text="22" created="Sun, 12 Jul 2015 19:39:13 GMT"/>
							<outline text="33" created="Sun, 12 Jul 2015 19:39:13 GMT"/>
							<outline text="44" created="Sun, 12 Jul 2015 19:39:14 GMT"/>
							<outline text="55" created="Tue, 14 Jul 2015 14:31:37 GMT"/>
							</outline>
						<outline text="Hello"/>
						</outline>
					<outline text="July 11" created="Sat, 11 Jul 2015 12:30:49 GMT" name="11">
						<outline text="Why recommend Stewart for Twitter?" created="Sat, 11 Jul 2015 12:30:50 GMT" hash="dc4e511135ec68286fe979aa2df5085e" img="https://upload.wikimedia.org/wikipedia/commons/4/42/Apollo_11_ticker_tape_parade_1.jpg" name="whyRecommendStewartForTwitter" type="outline">
							<outline text="Yesterday I &lt;a href=&quot;https://twitter.com/davewiner/status/619600456617193472&quot;&gt;posted an idea&lt;/a&gt; for Twitter that they merge with Slack, and have Stewart Butterfield, their founder, run the whole thing. Shortly after posting it, Stewart was tagged by another Twitter user (I don't like to do that myself, because I don't like being dragged into discussions, you tend to be cc'd on all replies and that goes on indefinitely, and Stewart didn't ask for this), and replied that he was &lt;a href=&quot;https://twitter.com/stewart/status/619656685041270784&quot;&gt;busy&lt;/a&gt;. Not surprising. I didn't intend it as a literal suggestion, I wanted to show that there was another choice for Twitter, that perhaps wasn't being given enough thought." created="Sat, 11 Jul 2015 12:30:59 GMT"/>
							<outline text="There seem to be two possible courses:" created="Sat, 11 Jul 2015 12:32:59 GMT">
								<outline text="1. Follow the direction dictated by &quot;the street&quot; which means the product doesn't change. Basically go down the path that was pioneered by Facebook. Twitter gradually turns into Facebook." created="Sat, 11 Jul 2015 12:33:09 GMT"/>
								<outline text="2. Or go another fundamentally different way. Add long-needed features, clean up the UI, create new API endpoints, so the product can be a more effective platform. If the new leader of Twitter was very bold, he or she might try turning Twitter into a protocol and encourage federation, on the theory that a &lt;a href=&quot;https://en.wikipedia.org/wiki/Flotilla&quot;&gt;flotilla&lt;/a&gt; of competitors is what Facebook actually needs. ;-)" created="Sat, 11 Jul 2015 12:34:29 GMT"/>
								</outline>
							<outline text="The two courses suggest completely different kinds of leaders." created="Sat, 11 Jul 2015 12:36:04 GMT"/>
							<outline text="If you go with #1, you might as well hire back Dick Costolo. He's probably available. And he has experience trying to lead the company in the direction the street appears to want Twitter to go. " created="Sat, 11 Jul 2015 12:36:14 GMT"/>
							<outline text="But the second course, which would be one you'd want someone like Butterfield to lead, suggests hiring someone who has deep product experience in tech, and might see how to evolve the current Twitter product into an exciting platform. I think the potential is there. Starting from a base of 300 million users is not nothing! :-)" created="Sat, 11 Jul 2015 12:37:08 GMT"/>
							<outline text="I don't go to tech industry parties these days, so I can't tell you who might be floating around in the valley who has wacky ideas and yearns to drive something big into some new uncharted territory. " created="Sat, 11 Jul 2015 12:38:20 GMT"/>
							<outline text="And I have no idea if such a transition could work if Twitter is a public company. Maybe this could only happen as part of an acquisition, effectively taking Twitter private. " created="Sat, 11 Jul 2015 12:39:13 GMT"/>
							</outline>
						</outline>
					</outline>
				<outline text="April 2015" created="Sat, 25 Apr 2015 15:33:03 GMT" name="april2015" type="include" url="http://liveblog.co/users/davewiner/archive/6f585192e5d4c5085e5d1e4e3ec3cb0f.opml">
					<outline text="April 30" created="Thu, 30 Apr 2015 17:01:08 GMT" name="30">
						<outline text="The liveblog is once again live" created="Fri, 01 May 2015 01:20:04 GMT" hash="6f66f0a124646dd3681bd7566e1b2710" name="theLiveblogIsOnceAgainLive" type="outline">
							<outline text="I just re-wired up the live-ness of the liveblog. " created="Fri, 01 May 2015 01:20:14 GMT"/>
							<outline text="So now when I update one of the pages on the liveblog site, anyone who's watching it will get the updates in realtime, without having to reload. " created="Fri, 01 May 2015 01:20:44 GMT"/>
							</outline>
						<outline text="&quot;Reproducible&quot;" created="Thu, 30 Apr 2015 18:14:23 GMT" hash="0c5a4301890f192798cc00151ea57083" name="wonderfulDebuggingExperience" type="outline">
							<outline text="This post has been &lt;a href=&quot;http://scripting.com/2015/04/30/reproducible.html&quot;&gt;promoted&lt;/a&gt; to Scripting News." created="Thu, 30 Apr 2015 22:09:10 GMT"/>
							</outline>
						<outline text="Projection" created="Thu, 30 Apr 2015 17:01:09 GMT" hash="ebeecde7a67acb5d024b19186ff6d260" name="projection" type="outline">
							<outline text="Sometimes I get the random thought that someone is mad at me."/>
							<outline text="Then I ask myself -- is there any evidence to support this belief?"/>
							<outline text="Then I realize, oh shit, it's the version of the person in my head who's mad at me. "/>
							<outline text="We all do this. There's a technical term for it, it's called &lt;a href=&quot;https://en.wikipedia.org/wiki/Psychological_projection&quot;&gt;projection&lt;/a&gt;."/>
							<outline text="My mind is always playing these little dramas in my head. They can be amusing if you realize that's what they are, or torture if you don't. :-)"/>
							</outline>
						</outline>
					<outline text="April 29" created="Wed, 29 Apr 2015 15:12:41 GMT" name="29">
						<outline text="Virtual hosting and file sharing" created="Thu, 30 Apr 2015 03:12:51 GMT" hash="482ac47c412e7ac70980bf801f39f71e" name="virtualHostingAndFileSharing" type="outline">
							<outline text="Here's something that would be great, and I wonder if anyone does it." created="Thu, 30 Apr 2015 03:13:15 GMT" img="http://scripting.com/2015/04/29/mask.png" name="heresSomethingThatWouldBeGreatAndIWonderIfAnyoneDoesIt"/>
							<outline text="Suppose there were a way to fire up a Heroku app that had as its file system a Dropbox hierarchy you could share with your Macs." created="Thu, 30 Apr 2015 03:13:27 GMT" name="supposeThereWereAWayToFireUpAHerokuAppThatHadAsItsFileSystemADropboxHierarchyYouCouldShareWithYourMacs">
								<outline text="Not just for application files, for content as well. And not just for launching, to serve as the file system for the app. I guess it was necessary to be very clear about this because Heroku has a &lt;a href=&quot;https://devcenter.heroku.com/articles/dropbox-sync&quot;&gt;way&lt;/a&gt; to deploy apps from Dropbox. That's nice, but it's far less than what I'm thinking about." created="Thu, 30 Apr 2015 13:21:46 GMT" name="notJustForApplicationFilesForContentAsWellAndNotJustForLaunchingToServeAsTheFileSystemForTheAppIGuessItWasNecessaryToBeVeryClearAboutThisBecauseHerokuHasAWayToDeployAppsFromDropboxThatsNiceButItsFarLessThanWhatImThinkingAbout"/>
								</outline>
							<outline text="Or if Google had hosting for Node.js apps that could use Google Drive as their file system, again allowing me to fire up cloud-based apps that I could put data into through my local file system. " created="Thu, 30 Apr 2015 03:13:55 GMT"/>
							<outline text="Or if Azure had a way to run Node.js apps (that's the server runtime I use, btw) with their file system, I believe it's called &lt;a href=&quot;https://onedrive.live.com/about/en-us/&quot;&gt;OneDrive&lt;/a&gt;." created="Thu, 30 Apr 2015 03:14:45 GMT"/>
							<outline text="Makes you kind of wish that Dropbox ran a cloud service like Heroku. " created="Thu, 30 Apr 2015 03:16:03 GMT"/>
							<outline text="Heroku is pretty ideal but for one thing -- no file system! " created="Thu, 30 Apr 2015 03:16:20 GMT"/>
							<outline text="Do you understand what I'm thinking about?" created="Thu, 30 Apr 2015 03:16:32 GMT"/>
							<outline text="I want a full-powered publicly accessible server runtime that I can easily share files with on my desktop." created="Thu, 30 Apr 2015 03:16:45 GMT"/>
							<outline text="I have something like this already running here, with Linode and Dropbox. Pretty nice except the Linode server seems a little resource-constrained. I've become quite a snob now that I get my Heroku servers for free (I'm not special, &lt;a href=&quot;https://onedrive.live.com/about/en-us/&quot;&gt;you&lt;/a&gt; can have them too). They work great. If only they had a file system. " created="Thu, 30 Apr 2015 03:17:05 GMT"/>
							</outline>
						<outline text="That moment when Hello World worked" created="Wed, 29 Apr 2015 21:37:29 GMT" hash="417e76515f53faa976aec78afc70e808" name="thatMomentWhenHelloWorldWorked" type="outline">
							<outline text="Well, this has been a long  time coming. I want to make this new outliner a really excellent tool for code-writing. " created="Wed, 29 Apr 2015 21:37:38 GMT" img="http://static.scripting.com/larryKing/images/2013/12/15/elephant.gif"/>
							<outline text="Largely because I want the code to run on the outliner itself. We had this working very nicely in Frontier. This will allow me to do a lot more of my work in this space. This is good. ;-)" created="Wed, 29 Apr 2015 21:40:34 GMT"/>
							<outline text="So I added a new nodetype -- code -- and when it sees a node with that type, it renders it as JavaScript, not HTML. It's very lightweight. Doesn't do any interpretation, just writes the characters out, nicely indented with tabs. " created="Wed, 29 Apr 2015 21:41:10 GMT"/>
							<outline text="Here's the &lt;a href=&quot;http://liveblog.co/users/davewiner/2015/04/29/helloword.js&quot;&gt;file&lt;/a&gt; containing Hello World." created="Wed, 29 Apr 2015 21:41:57 GMT"/>
							<outline text="This is the  one-liner I ran in the browser, console:" created="Wed, 29 Apr 2015 21:42:08 GMT"/>
							<outline text="&lt;code style=&quot;font-size: .7em&quot;&gt;runScriptFromUrl (&quot;http://liveblog.co/users/davewiner/2015/04/29/helloword.js&quot;)&lt;/code&gt;" created="Wed, 29 Apr 2015 21:42:23 GMT"/>
							<outline text="And here's a &lt;a href=&quot;http://scripting.com/2015/04/29/helloWorld.png&quot;&gt;screen shot&lt;/a&gt; of the result. " created="Wed, 29 Apr 2015 21:42:24 GMT"/>
							<outline text="Key point, those files can be included in generated web pages with &amp;lt;script&gt; tags. And we  can certainly edit templates in the outliner. So we are on the way to having it all. ;-)" created="Wed, 29 Apr 2015 21:42:30 GMT"/>
							</outline>
						<outline text="helloWord" created="Wed, 29 Apr 2015 20:48:36 GMT" hash="cbcdee40d1c16f009dee98a771ab89d6" name="helloword" type="code">
							<outline text="function helloWorld () {" created="Wed, 29 Apr 2015 20:56:41 GMT">
								<outline text="alert (&quot;Hello World!&quot;);" created="Wed, 29 Apr 2015 20:56:52 GMT"/>
								<outline text="}" created="Wed, 29 Apr 2015 20:57:00 GMT"/>
								</outline>
							<outline text="helloWorld (); " created="Wed, 29 Apr 2015 21:17:36 GMT"/>
							</outline>
						<outline text="Images in Liveblog" created="Wed, 29 Apr 2015 15:12:42 GMT" hash="92e9140b2f2fd86bba07e5d79db349aa" img="http://scripting.com/2015/04/29/babel.png" name="imagesInLiveblog" type="outline">
							<outline text="Now I'm going to put images at the top of pages of liveblog posts." created="Wed, 29 Apr 2015 15:12:47 GMT"/>
							<outline text="One of the features Doc asked for. Since he's the First User, his requests get priority, even over mine. " created="Wed, 29 Apr 2015 15:13:01 GMT"/>
							<outline text="Update: I'm backing off this feature for now. Yes I have done it before, but I made different design choices with the layout of liveblog pages, and they aren't compatible with the background image. This will have to wait until we have better templating features in the liveblog software, so we have better control over things." created="Wed, 29 Apr 2015 17:59:11 GMT"/>
							</outline>
						</outline>
					<outline text="April 28" created="Tue, 28 Apr 2015 14:23:27 GMT" name="28">
						<outline text="BT Sync is a moving, broken target" created="Wed, 29 Apr 2015 03:06:49 GMT" hash="9d17080ddeeabc9a426b09bde46acb4b" name="btSyncIsAMovingBrokenTarget" type="outline">
							<outline text="One of the projects I wanted to do along with &lt;a href=&quot;http://podcatch.com/&quot;&gt;podcatch.com&lt;/a&gt; is have a folder with the MP3s of the podcasts we follow, that could be distributed to anyone who wanted it, via &lt;a href=&quot;https://www.getsync.com/&quot;&gt;BT Sync&lt;/a&gt;. " created="Wed, 29 Apr 2015 03:06:56 GMT" img="http://static.scripting.com/larryKing/images/2013/12/10/cow.gif"/>
							<outline text="So I downloaded the latest version of the software, generated a sharing token and sent it to Andrew Shell, a fellow programmer, and asked him to subscribe. " created="Wed, 29 Apr 2015 03:16:05 GMT"/>
							<outline text="The software said (to Andrew) that it was waiting for approval from someone, probably me, but there was no indication in my software that it was waiting for anything. Further, the idea is that this content would be available to anyone. The MP3s are totally public, there's absolutely no need for permission here. I never told it to ask for permission before allowing a subscription." created="Wed, 29 Apr 2015 03:08:01 GMT"/>
							<outline text="We really could use BT Sync, it was a great idea. The first versions of the software worked well. Even if it had a plain user interface, who cares. Once it's set up, you just forget about it. And the new interface is less functional, confusing, and somewhat broken. That's not an improvement!" created="Wed, 29 Apr 2015 03:08:57 GMT"/>
							<outline text="I'm putting this out there in case there's an interest in getting a project going to create something simple, usable, and suitable for the kind of project I talk about here. " created="Wed, 29 Apr 2015 03:10:02 GMT"/>
							</outline>
						<outline text="Good meeting with Doc" created="Tue, 28 Apr 2015 19:40:26 GMT" hash="99bb3873a63fb95c0d0147c2ff8d8405" name="goodMeetingWithDoc" type="outline">
							<outline text="Showed him through the new UI for liveblog.co." created="Tue, 28 Apr 2015 19:40:31 GMT"/>
							<outline text="However there was a thrashing problem with building the RSS feed." created="Tue, 28 Apr 2015 19:40:43 GMT" name="howeverThereWasAThrashingProblemWithBuildingTheRssFeed"/>
							<outline text="But the problem isn't happening here." created="Tue, 28 Apr 2015 19:41:11 GMT"/>
							<outline text="Not sure why..." created="Tue, 28 Apr 2015 19:41:22 GMT"/>
							</outline>
						<outline text="Limits of SoundCloud's RSS?" created="Tue, 28 Apr 2015 15:56:38 GMT" hash="0cef06ff8ae7ac8032bbae921b47546c" name="limitsOfSoundcloudsRss" type="outline">
							<outline text="With the &lt;a href=&quot;http://techcrunch.com/2015/04/28/soundcloud-opens-its-podcasting-features-to-everyone/#.fdlwku:rOB0&quot;&gt;announcement&lt;/a&gt; of SoundCloud's podcast producing capability, there are some people speaking up about the limits it has. I wasn't aware of these." created="Tue, 28 Apr 2015 15:56:50 GMT"/>
							<outline text="My opinion: As long as they're providing feeds that have proper &lt;code&gt;&amp;lt;enclosure&gt;&lt;/code&gt; elements, there isn't anything we can't do by mirroring the feeds elsewhere. " created="Tue, 28 Apr 2015 15:57:28 GMT"/>
							<outline text="However, I'm totally new to this, so please share whatever you know in a comment below. Thanks! :-)" created="Tue, 28 Apr 2015 15:58:16 GMT"/>
							</outline>
						<outline text="What will the end of Mad Men be like?" created="Tue, 28 Apr 2015 14:24:17 GMT" hash="dc2d322d5d675c339b4b38ef8337c461" name="whatWillTheEndOfMadMenBeLike" type="outline">
							<outline text="I just watched the musical number done by Bert Cooper at the end of the last half-season. That would have been a fitting end to Mad Men. After many seasons of selling things that were not free, to realize that the stars and the moon are for everyone, and don't cost a dime. So true. The best things in life &lt;i&gt;are&lt;/i&gt; free. " created="Tue, 28 Apr 2015 14:24:26 GMT"/>
							</outline>
						<outline text="Rebooting the Liveblog" created="Tue, 28 Apr 2015 14:23:28 GMT" hash="fab7387e8c97989ee89c096aeb734da3" name="rebootingTheLiveblog" type="outline">
							<outline text="I'm meeting with Doc later today to talk about the second coming of the Liveblog software. This time I think I have it. Haha. But I thought so last time too. " created="Tue, 28 Apr 2015 14:23:33 GMT"/>
							<outline text="One of the things that tripped Doc up is that the new version didn't automatically re-render a story when you edit it. I would have called this a loose-end (after all I did a complete tear-down, this is the equiv of forgetting to rewire the air conditioning in the car after a rebuild). " created="Tue, 28 Apr 2015 15:11:28 GMT"/>
							<outline text="I thought it's good to take another look at this and be sure that I want it to re-render after each change. And I do. I like that when I pause for a second in typing, the story updates as well." created="Tue, 28 Apr 2015 15:12:28 GMT"/>
							<outline text="And this is something that can easily be made a setting, so if you prefer to have to manually update the rendering, you can have it work that way, no problem." created="Tue, 28 Apr 2015 15:13:46 GMT"/>
							<outline text="PS: I got images working in outlines too. ;-)" created="Tue, 28 Apr 2015 15:35:03 GMT"/>
							</outline>
						</outline>
					<outline text="April 27" created="Mon, 27 Apr 2015 21:29:17 GMT" name="27">
						<outline text="There's another Internet out there" created="Tue, 28 Apr 2015 03:31:04 GMT" hash="aeafdb1a8edf944d4b3f1db9f603ad16" name="theresAnotherInternetOutThere" type="outline">
							<outline text="Waiting to be discovered." created="Tue, 28 Apr 2015 03:31:12 GMT"/>
							<outline text="The other Internet is filled with people seeking to expand human knowledge." created="Tue, 28 Apr 2015 03:31:50 GMT"/>
							<outline text="For each of those people there's  a place to ask a question by someone who doesn't have their expertise. There's a place where they can share what they learn with other people who share their interest. " created="Tue, 28 Apr 2015 03:32:15 GMT"/>
							<outline text="In the new Internet, if someone responds ignorantly, you don't respond. On the new one, ignorance just floats away. If two people are engaged in a powerless battle to the end, all links are severed. They can fight with each other forever, like the two characters played by &lt;a href=&quot;https://en.wikipedia.org/wiki/Frank_Gorshin&quot;&gt;Frank Gorshin&lt;/a&gt; in that great &lt;a href=&quot;https://www.youtube.com/watch?v=vi7QQ5pO7_A&quot;&gt;Star Trek episode&lt;/a&gt;. " collapse="true" created="Tue, 28 Apr 2015 04:03:51 GMT">
								<outline text="&lt;iframe width=&quot;480&quot; height=&quot;360&quot; src=&quot;https://www.youtube.com/embed/vi7QQ5pO7_A&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;"/>
								</outline>
							<outline text="No one cares how many hits a page gets. There probably aren't pages on this Internet. The chunks of information can be small, and they can be related to each other." created="Tue, 28 Apr 2015 03:32:53 GMT"/>
							<outline text="Think of an index card, that can easily be connected to other cards. With labels on the arcs. And you can write programs that traverse the links. These programs will be easy to write! And they will do powerful things because the networks they traverse contain powerful ideas. Things can be simple and powerful at the same time." created="Tue, 28 Apr 2015 03:33:21 GMT" img="http://scripting.com/2015/04/12/yknjs.png"/>
							<outline text="Name-calling will get your links erased." created="Tue, 28 Apr 2015 04:21:24 GMT"/>
							<outline text="I want to figure out how to make this work. It will be exclusive. Only the people I want to connect with will show up in my view of the world. " created="Tue, 28 Apr 2015 03:34:01 GMT"/>
							<outline text="I define a &lt;a href=&quot;https://en.wiktionary.org/wiki/karass&quot;&gt;karass&lt;/a&gt;, a group of people who I am closely connected to. " created="Tue, 28 Apr 2015 03:34:33 GMT"/>
							<outline text="But what I write can be read by anyone. I don't care. But I don't want to spend time listening to people who aren't on serious explorations. Sorry, this Internet of my imagination is no more a democracy than the other Internet that we're all using today." created="Tue, 28 Apr 2015 03:34:58 GMT"/>
							</outline>
						<outline text="Real poncho or a Sears poncho?" created="Mon, 27 Apr 2015 21:29:18 GMT" name="isThatARealPonchoOrASearsPoncho" type="outline">
							<outline text="&lt;iframe width=&quot;640&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/LjPlhb4f9P8&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;" created="Mon, 27 Apr 2015 21:29:26 GMT"/>
							</outline>
						</outline>
					<outline text="April 25" created="Sat, 25 Apr 2015 15:33:04 GMT" name="25">
						<outline text="Listening to new podcasts" created="Sat, 25 Apr 2015 15:52:05 GMT" name="listeningToNewPodcasts" type="outline">
							<outline text="Thanks to &lt;a href=&quot;http://podcatch.com/&quot;&gt;podcatch.com&lt;/a&gt;, I'm listening to more podcasts, learning a lot." created="Sat, 25 Apr 2015 15:52:13 GMT"/>
							<outline text="Still, imho the best podcast is Planet Money. " created="Sat, 25 Apr 2015 15:52:31 GMT">
								<outline text="The 20-minute length is ideal." created="Sat, 25 Apr 2015 15:52:43 GMT"/>
								<outline text="Short single-idea podcasts are great." created="Sat, 25 Apr 2015 16:07:03 GMT"/>
								<outline text="They're intelligent." created="Sat, 25 Apr 2015 15:53:02 GMT"/>
								<outline text="They don't waste a lot of time." created="Sat, 25 Apr 2015 15:53:24 GMT"/>
								</outline>
							<outline text="It's quiet on the weekends" created="Sat, 25 Apr 2015 16:51:44 GMT">
								<outline text="I notice that podcasts are released in spurts, mostly around the end of business, east coast time, on weekdays. Probably would work better if some of them were released on weekends when we might have more time to listen. " created="Sat, 25 Apr 2015 16:51:48 GMT"/>
								</outline>
							<outline text="The Serial template" created="Sat, 25 Apr 2015 15:53:37 GMT">
								<outline text="There are a bunch of podcasts started recently that are different content flowed through the Serial template. " created="Sat, 25 Apr 2015 16:07:20 GMT"/>
								<outline text="The latest is Startup, which is following the progress of a three-person startup that came out of Y-combinator, but apparently things have not been going smoothly." created="Sat, 25 Apr 2015 15:54:45 GMT"/>
								<outline text="I liked the first episode a lot. I wanted to give the entrepreneurs some advice about percentages, and how important the person who makes the product is. " created="Sat, 25 Apr 2015 15:54:40 GMT"/>
								<outline text="That's a good sign -- engagement." created="Sat, 25 Apr 2015 15:55:29 GMT"/>
								</outline>
							<outline text="Too much talk up front" created="Sat, 25 Apr 2015 15:55:34 GMT">
								<outline text="I want to grab some of the podcasters by the collar and yell -- get to the point! One podcast took 7 minutes of advertising, slowwwly talking about the products, before saying what the program is about. I only listened because I had heard good things about the show, and wanted to give it a try." created="Sat, 25 Apr 2015 15:55:42 GMT"/>
								</outline>
							<outline text="5-minutes is a good length" created="Sat, 25 Apr 2015 15:56:43 GMT">
								<outline text="I think 5-minute podcasts are going to be nice!" created="Sat, 25 Apr 2015 15:56:50 GMT"/>
								<outline text="I only have one in the mix, the daily writer's almanac by Garrison Keeler." created="Sat, 25 Apr 2015 15:56:58 GMT"/>
								<outline text="Of course it's very well done, and I learn something every time. That makes it a really good deal. I'm also learning to appreciate poetry. I think. ;-)" created="Sat, 25 Apr 2015 15:57:16 GMT"/>
								<outline text="If there were a lot of 5-minute podcasts, it would become like podcasting a la carte. You design your own program from the people you like to listen to. " created="Sat, 25 Apr 2015 16:08:17 GMT"/>
								<outline text="Encourage people to get. to. the. point. ;-)" created="Sat, 25 Apr 2015 16:08:43 GMT"/>
								</outline>
							<outline text="Love The Americans, despise their podcast" created="Sat, 25 Apr 2015 15:58:20 GMT">
								<outline text="One of my favorite shows is The Americans. If you love binge-watching, go watch it. There are three seasons. The third just concluded. It's a wonderful show." created="Sat, 25 Apr 2015 15:58:28 GMT"/>
								<outline text="And they have a podcast. Including the writers and the stars. But they just giggle. They think it's so cool to be in touch with their fans. Giggle. Hahah. Look they're really British. OK. I get it. Now fucking talk about the fucking program." created="Sat, 25 Apr 2015 15:59:01 GMT"/>
								<outline text="I'm sure they mean well, but this is a case where they need a good interviewer, someone who reps the listeners, and keeps them from being too full of themselves." created="Sat, 25 Apr 2015 15:59:48 GMT"/>
								</outline>
							<outline text="Podcast criticism" created="Sat, 25 Apr 2015 16:00:14 GMT">
								<outline text="I love that we've gotten to the point where there's enough interesting stuff in the flow that you can write about podcasting as an emerging art. " created="Sat, 25 Apr 2015 16:00:18 GMT"/>
								<outline text="Everyone keep on truckin! :-)" created="Sat, 25 Apr 2015 16:00:44 GMT"/>
								</outline>
							</outline>
						<outline text="Welcome to my new liveblog" created="Sat, 25 Apr 2015 15:33:05 GMT" name="welcomeToMyNewLiveblog" type="outline">
							<outline text="I had to rebuild this thing because:" created="Sat, 25 Apr 2015 15:33:10 GMT">
								<outline text="I didn't like the way the reader worked. " created="Sat, 25 Apr 2015 15:33:17 GMT">
									<outline text="I didn't mind it for my own blog, but when I had to read Doc's stuff in the outliner, my mind rebelled. I have too much to process anyway, I need this stuff to be arranged so it reads nicely. Sorry, back to the drawing board El Grande." created="Sat, 25 Apr 2015 15:33:25 GMT"/>
									</outline>
								<outline text="I hit a scaling wall" created="Sat, 25 Apr 2015 15:34:05 GMT">
									<outline text="My outline was taking too long to load in the reader. Maybe that would have been solved by the new rendering technique, but I wanted multiple files, and now was the time to bite the bullet and get the &lt;i&gt;little outliner&lt;/i&gt; codebase (not so little anymore) up to snuff. Multiple files makes it possible to switch to a new file when the one I'm writing in gets too big. Experience with Fargo says this is a good approach." created="Sat, 25 Apr 2015 15:34:12 GMT"/>
									<outline text="And as a bonus, I get private files. That will come in handy. ;-)" created="Sat, 25 Apr 2015 15:44:16 GMT"/>
									</outline>
								<outline text="I wanted the glossary back" created="Sat, 25 Apr 2015 15:35:56 GMT">
									<outline text="I need the ability to define hot strings." created="Sat, 25 Apr 2015 15:36:01 GMT"/>
									</outline>
								</outline>
							<outline text="Anyway, now it's rebuilt. " created="Sat, 25 Apr 2015 15:36:16 GMT">
								<outline text="And btw, I see lots of loose ends. " created="Sat, 25 Apr 2015 15:36:49 GMT"/>
								<outline text="But I think they're mostly of the form of sawdust on the floor and tools left out. " created="Sat, 25 Apr 2015 15:39:59 GMT"/>
								<outline text="I feel pretty good about this codebase. Took a long time to get here. ;-)" created="Sat, 25 Apr 2015 15:40:03 GMT"/>
								</outline>
							<outline text="Let's have a party." created="Sat, 25 Apr 2015 15:36:23 GMT"/>
							</outline>
						</outline>
					</outline>
				</outline>
			<outline text="package.json">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;testopml2.js&quot;,"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave@smallpicture.com&gt;&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.0.4&quot;,"/>
					<outline text="&quot;scripts&quot;: {">
						<outline text="&quot;start&quot;: &quot;node testopml.js&quot;">
							<outline text="},"/>
							</outline>
						</outline>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;daveopml&quot;: &quot;*&quot;"/>
						<outline text="} "/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="package.json" isComment="true">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;testopml.js&quot;,"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave@smallpicture.com&gt;&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.0.40&quot;,"/>
					<outline text="&quot;scripts&quot;: {">
						<outline text="&quot;start&quot;: &quot;node testopml.js&quot;">
							<outline text="},"/>
							</outline>
						</outline>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;request&quot;: &quot;*&quot;,"/>
						<outline text="&quot;feedparser&quot;: &quot;*&quot;," isComment="true"/>
						<outline text="&quot;opmlparser&quot;: &quot;*&quot;"/>
						<outline text="&quot;strftime&quot;: &quot;*&quot;," isComment="true"/>
						<outline text="&quot;marked&quot;: &quot;*&quot;" isComment="true"/>
						<outline text="} "/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			</outline>
		<outline text="build script">
			<outline text="nodeEditorSuite.utilities.buildDaveOpml ()"/>
			</outline>
		</body>
	</opml>
